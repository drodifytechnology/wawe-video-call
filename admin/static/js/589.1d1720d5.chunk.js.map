{"version":3,"file":"static/js/589.1d1720d5.chunk.js","mappings":"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","sources":["Components/Dialog/userDialog.js"],"sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\n\r\n//alert\r\n\r\n\r\n//redux\r\nimport { useSelector, useDispatch, connect } from \"react-redux\";\r\nimport { CLOSE_USER_DIALOG } from \"../../store/user/types\";\r\nimport { editUser } from \"../../store/user/action\";\r\n\r\n//custom css\r\nimport \"../../dist/css/style.min.css\";\r\nimport \"../../dist/css/style.css\";\r\n\r\n//custom javascript\r\nimport \"../../dist/js/custom.min.js\";\r\nimport \"../../dist/js/app-style-switcher\";\r\nimport \"../../dist/js/sidebarmenu\";\r\nimport \"../../dist/js/feather.min.js\";\r\nimport \"../../assets/libs/perfect-scrollbar/dist/perfect-scrollbar.jquery.min.js\";\r\n\r\n//icon\r\nimport Cancel from \"@material-ui/icons/Cancel\";\r\nimport {\r\n  DialogContent,\r\n  DialogTitle,\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\n//dialog\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst HostDialog = (props) => {\r\n  const dispatch = useDispatch();\r\n  \r\n\r\n  const { dialog: open, dialogData, user } = useSelector((state) => state.user);\r\n\r\n  const [imageData, setImageData] = useState(null);\r\n  const [imagePath, setImagePath] = useState(null);\r\n  const [mongoId, setMongoId] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [gender, setGender] = useState(\"\");\r\n  const [username, setUserName] = useState(\"\");\r\n  const [bio, setBio] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  // const [coin, setCoin] = useState(0);\r\n  const [mobileNo, setMobileNo] = useState(\"\");\r\n  const [errors, setError] = useState({\r\n    name: \"\",\r\n    image: \"\",\r\n    username: \"\",\r\n    // bio: \"\",\r\n    gender: \"\",\r\n    country: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (dialogData) {\r\n    console.log('dialogData', dialogData)\r\n      setMongoId(dialogData?._id);\r\n      setUserName(dialogData.username);\r\n      setCountry(dialogData.country);\r\n      setName(dialogData?.name);\r\n      setImagePath(dialogData?.image);\r\n      setGender(dialogData.gender);\r\n      setBio(dialogData.bio);\r\n      // setCoin(dialogData.coin);\r\n      setMobileNo(dialogData.mobileNo);\r\n    }\r\n  }, [dialogData]);\r\n\r\n  useEffect(\r\n    () => () => {\r\n      setError({\r\n        name: \"\",\r\n        image: \"\",\r\n        username: \"\",\r\n        // bio: \"\",\r\n        gender: \"\",\r\n        country: \"\",\r\n      });\r\n      setMongoId(\"\");\r\n      setGender(\"\");\r\n      setName(\"\");\r\n      setCountry(\"\");\r\n      setUserName(\"\");\r\n      setBio(\"\");\r\n      // setCoin(0);\r\n      setMobileNo(\"\");\r\n      setImageData(null);\r\n      setImagePath(null);\r\n    },\r\n    [open]\r\n  );\r\n\r\n  const handleInputImage = (e) => {\r\n    if (e.target.files[0]) {\r\n      setImageData(e.target.files[0]);\r\n      const reader = new FileReader();\r\n\r\n      reader.addEventListener(\"load\", () => {\r\n        setImagePath(reader.result);\r\n      });\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!name || !username || gender === \"\" || !country) {\r\n      const errors = {};\r\n      if (!name) {\r\n        errors.name = \"Name can't be a blank!\";\r\n      }\r\n      if (!username) {\r\n        errors.username = \"User Name can't be a blank!\";\r\n      }\r\n\r\n      if (!country) errors.country = \"Country can't be a blank!\";\r\n\r\n      if (!imageData && !imagePath) {\r\n        errors.image = \"Please select an Image!\";\r\n      }\r\n\r\n      if (gender === \"\") {\r\n        errors.gender = \"Please select a Gender!\";\r\n      }\r\n\r\n      return setError({ ...errors });\r\n    }\r\n\r\n    \r\n\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"name\", name);\r\n    formData.append(\"image\", imageData);\r\n    formData.append(\"username\", name);\r\n    formData.append(\"bio\", bio);\r\n    formData.append(\"gender\", gender);\r\n    // formData.append(\"coin\", coin);\r\n    formData.append(\"mobileNo\", mobileNo);\r\n    formData.append(\"country\", country);\r\n\r\n    if (mongoId) {\r\n      props.editUser(formData, mongoId);\r\n    } else {\r\n      props.createNewHost(formData);\r\n    }\r\n  };\r\n\r\n  const closePopup = () => {\r\n    dispatch({ type: CLOSE_USER_DIALOG });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog\r\n        open={open}\r\n        aria-labelledby=\"responsive-dialog-title\"\r\n        onClose={closePopup}\r\n        disableBackdropClick\r\n        disableEscapeKeyDown\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n      >\r\n        <DialogTitle id=\"responsive-dialog-title\"  >\r\n          User\r\n        </DialogTitle>\r\n\r\n        <IconButton\r\n          style={{\r\n            position: \"absolute\",\r\n            right: 0,\r\n            color: \"#5E72E4\",\r\n          }}\r\n        >\r\n          <Tooltip title=\"Close\">\r\n            <Cancel onClick={closePopup} />\r\n          </Tooltip>\r\n        </IconButton>\r\n        <DialogContent>\r\n          <div class=\"modal-body pt-1 px-1 pb-3\">\r\n            <div class=\"d-flex flex-column text-center\">\r\n              <form>\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"form-group\">\r\n                      <label class=\"float-left\">Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        placeholder=\"Enter Name\"\r\n                        required\r\n                        value={name}\r\n                        onChange={(e) => {\r\n                          setName(e.target.value);\r\n\r\n                          if (!e.target.value) {\r\n                            return setError({\r\n                              ...errors,\r\n                              name: \"Name can't be a blank!\",\r\n                            });\r\n                          } else {\r\n                            return setError({\r\n                              ...errors,\r\n                              name: \"\",\r\n                            });\r\n                          }\r\n                        }}\r\n                      />\r\n                      {errors.name && (\r\n                        <div class=\"pl-1 text-left\">\r\n                          <Typography variant=\"caption\" color=\"error\">\r\n                            {errors.name}\r\n                          </Typography>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"form-group\">\r\n                      <label class=\"float-left\">UserName</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        placeholder=\"Enter Username\"\r\n                        required\r\n                        value={username}\r\n                        onChange={(e) => {\r\n                          setUserName(e.target.value);\r\n\r\n                          if (!e.target.value) {\r\n                            return setError({\r\n                              ...errors,\r\n                              username: \"User Name can't be a blank!\",\r\n                            });\r\n                          } else {\r\n                            return setError({\r\n                              ...errors,\r\n                              username: \"\",\r\n                            });\r\n                          }\r\n                        }}\r\n                      />\r\n                      {errors.username && (\r\n                        <div class=\"pl-1 text-left\">\r\n                          <Typography variant=\"caption\" color=\"error\">\r\n                            {errors.username}\r\n                          </Typography>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"form-group \">\r\n                  <label class=\"float-left\">Bio</label>\r\n                  <textarea\r\n                    type=\"text\"\r\n                    rows=\"3\"\r\n                    class=\"form-control\"\r\n                    placeholder=\"Enter bio\"\r\n                    required\r\n                    value={bio}\r\n                    onChange={(e) => {\r\n                      setBio(e.target.value);\r\n\r\n                      // if (!e.target.value) {\r\n                      //   return setError({\r\n                      //     ...errors,\r\n                      //     bio: \"Bio can't be a blank!\",\r\n                      //   });\r\n                      // } else {\r\n                      //   return setError({\r\n                      //     ...errors,\r\n                      //     bio: \"\",\r\n                      //   });\r\n                      // }\r\n                    }}\r\n                  />\r\n                  {/* {errors.bio && (\r\n                    <div class=\"pl-1 text-left\">\r\n                      <Typography variant=\"caption\" color=\"error\">\r\n                        {errors.bio}\r\n                      </Typography>\r\n                    </div>\r\n                  )} */}\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"form-group\">\r\n                      <label class=\"float-left\">Image</label>\r\n                      <input\r\n                        class=\"form-control\"\r\n                        type=\"file\"\r\n                        accept=\"image/jpg ,image/jpeg ,image/png\"\r\n                        required=\"\"\r\n                        onChange={handleInputImage}\r\n                      />\r\n                      {errors.image && (\r\n                        <div class=\"pl-1 text-left\">\r\n                          <Typography variant=\"caption\" color=\"error\">\r\n                            {errors.image}\r\n                          </Typography>\r\n                        </div>\r\n                      )}\r\n                      <div className=\"row mb-0 ml-2\">\r\n                        {imagePath && (\r\n                          <Fragment>\r\n                            <img\r\n                              src={imagePath}\r\n                              class=\"mt-3 rounded float-left mb-2\"\r\n                              height=\"50px\"\r\n                              width=\"50px\"\r\n                            />\r\n                          </Fragment>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-md-6\">\r\n                    <label class=\"float-left\">Gender</label>\r\n                    <div className=\"row\" style={{ marginTop: 43 }}>\r\n                      <div className=\"col-md-6 p-0\" style={{ marginLeft: -23 }}>\r\n                        <input\r\n                          type=\"radio\"\r\n                          id=\"customRadioInline1\"\r\n                          name=\"gender\"\r\n                          value=\"MALE\"\r\n                          checked={\r\n                            gender.toUpperCase() === \"MALE\" ? true : false\r\n                          }\r\n                          onChange={(e) => setGender(e.target.value)}\r\n                        />\r\n                        &nbsp;&nbsp;\r\n                        <label\r\n                          for=\"customRadioInline1\"\r\n                          class=\"font-weight-bold\"\r\n                        >\r\n                          Male\r\n                        </label>\r\n                      </div>\r\n                      <div className=\"col-md-6 p-0\" style={{ marginLeft: -40 }}>\r\n                        <input\r\n                          type=\"radio\"\r\n                          id=\"customRadioInline2\"\r\n                          name=\"gender\"\r\n                          value=\"FEMALE\"\r\n                          checked={\r\n                            gender.toUpperCase() === \"FEMALE\" ? true : false\r\n                          }\r\n                          onChange={(e) => setGender(e.target.value)}\r\n                        />\r\n                        &nbsp;&nbsp;\r\n                        <label\r\n                          for=\"customRadioInline2\"\r\n                          class=\"font-weight-bold\"\r\n                        >\r\n                          Female\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  {/* <div class=\"col-md-6\">\r\n                    <div class=\"form-group\">\r\n                      <label class=\"float-left\">Coin</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        placeholder=\"Enter Name\"\r\n                        required\r\n                        value={coin}\r\n                        onChange={(e) => {\r\n                          setCoin(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div> */}\r\n                  <div class=\"col-md-12\">\r\n                    <div class=\"form-group\">\r\n                      <label class=\"float-left\">Mobile No</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        placeholder=\"Enter Mobile No\"\r\n                        required\r\n                        value={mobileNo}\r\n                        maxLength={10}\r\n                        onChange={(e) => {\r\n                          setMobileNo(e.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"form-group \">\r\n                  <label class=\"float-left\">Country</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    placeholder=\"India\"\r\n                    required\r\n                    value={country}\r\n                    onChange={(e) => {\r\n                      setCountry(e.target.value);\r\n\r\n                      if (!e.target.value) {\r\n                        return setError({\r\n                          ...errors,\r\n                          country: \"Country can't be a blank!\",\r\n                        });\r\n                      } else {\r\n                        return setError({\r\n                          ...errors,\r\n                          country: \"\",\r\n                        });\r\n                      }\r\n                    }}\r\n                  />\r\n                  {errors.country && (\r\n                    <div class=\"pl-1 text-left\">\r\n                      <Typography variant=\"caption\" color=\"error\">\r\n                        {errors.country}\r\n                      </Typography>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"btn btn-primary btn-block btn-round\"\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default connect(null, { editUser })(HostDialog);\r\n"],"names":["connect","editUser","props","dispatch","useDispatch","dialog","open","dialogData","user","useSelector","state","imageData","setImageData","useState","imagePath","setImagePath","mongoId","setMongoId","name","setName","gender","setGender","username","setUserName","bio","setBio","country","setCountry","mobileNo","setMobileNo","errors","setError","image","useEffect","console","log","_id","closePopup","type","CLOSE_USER_DIALOG","_jsx","Fragment","children","_jsxs","Dialog","onClose","disableBackdropClick","disableEscapeKeyDown","fullWidth","maxWidth","DialogTitle","id","IconButton","style","position","right","color","Tooltip","title","Cancel","onClick","DialogContent","class","placeholder","required","value","onChange","e","target","Typography","variant","rows","accept","files","reader","FileReader","addEventListener","result","readAsDataURL","className","src","height","width","marginTop","marginLeft","checked","toUpperCase","for","maxLength","preventDefault","formData","FormData","append","createNewHost"],"sourceRoot":""}